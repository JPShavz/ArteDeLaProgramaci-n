# -*- coding: utf-8 -*-
"""EvidenciaA01646107.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nJGpJ6RISFm6cbsq9rekwGZqLmM25U2r
"""

import cv2
import numpy as np
import matplotlib.pyplot as plt
import pytesseract as pyt
from datetime import datetime, date

# Cargar la imagen
route = "/content/J6YVL74A5FGE3INLOTHJSYKILA.jpg"
imagen = cv2.imread(route)
today = date.today()

# Definir rangos de color
blanco_upper = np.array([255, 255, 255])
blanco_lower = np.array([230, 230, 230])

# Calcular días de diferencia de fecha
def days_until_date(date_str):
    target_date = datetime.strptime(date_str, "%d/%m/%Y").date()
    diferencia = (target_date - today).days
    return diferencia, target_date

# Invertir imagen
not_img = cv2.bitwise_not(imagen)
# Filtra para que los pixeles dentro del rango se conviertan en blanco los demás se vuelven negros
mask = cv2.inRange(not_img, blanco_lower, blanco_upper)
# Se aplica la mascara en los lugares donde aplica en la imagen invertida
and_img = cv2.bitwise_and(not_img, not_img, mask=mask)
# La dilatación hace más gruesas las partes blancas
img_dilate = cv2.dilate(and_img, None, iterations=3)
# Aplica un blur para reducir el ruido
img_gaussian = cv2.GaussianBlur(img_dilate, (7,7), 0)
# Hace lo opuesto de dilatar, hace más angosto el exto
img_erode = cv2.erode(img_gaussian, None, iterations=3)

# Convierte a grises
gray = cv2.cvtColor(img_erode, cv2.COLOR_BGR2GRAY) if len(img_erode.shape) == 3 else img_erode

# Invierte la imagen
gray = cv2.bitwise_not(gray)

# Ultima converson a blanco y negro
_, thresh = cv2.threshold(gray, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)

# Configuración para que detecte solo numeros, chatgpt
config = r'--oem 3 --psm 6 -c tessedit_char_whitelist=0123456789./'

# Deteca los numeros de la imagen
fecha = pyt.image_to_string(thresh, config=config)
# Formatea los numeros a una fecha
fecha_format = '30/' + fecha[0:2] + '/' + fecha[2:6]
# Calcula los días restantes
days, target = days_until_date(fecha_format)

# Resultados
print(f"Numeros detectados: {fecha}")
print(f"Fecha de caducidad: {target}")
print(f"Fecha hoy: {today}")
print(f"Días de diferencia: {days}")
print("")

plt.figure()

plt.subplot(3,4,1)
plt.axis("off")
plt.title("Original")
plt.imshow(imagen)

plt.subplot(3,4,2)
plt.axis("off")
plt.title("Inverse")
plt.imshow(not_img, cmap="gray")

plt.subplot(3,4,3)
plt.axis("off")
plt.title("And")
plt.imshow(and_img, cmap="gray")

plt.subplot(3,4,4)
plt.axis("off")
plt.title("Dilate")
plt.imshow(img_dilate, cmap="gray")

plt.subplot(3,4,5)
plt.axis("off")
plt.title("Gaussian Blur")
plt.imshow(img_gaussian, cmap="gray")

plt.subplot(3,4,6)
plt.axis("off")
plt.title("Erode")
plt.imshow(img_erode, cmap="gray")

plt.subplot(3,4,7)
plt.axis("off")
plt.title("Gray")
plt.imshow(gray, cmap="gray")

plt.subplot(3,4,8)
plt.axis("off")
plt.title("Final")
plt.imshow(thresh, cmap="gray")